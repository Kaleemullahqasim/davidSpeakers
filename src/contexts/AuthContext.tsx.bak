import React, { createContext, useState, useEffect, useContext } from 'react';
import { useRouter } from 'next/router';
import { supabase } from '../lib/supabaseClient'; // Import the singleton instance
import { User as SupabaseUser } from '@supabase/supabase-js';
import { syncAuthToken } from '@/lib/auth-helpers';

// Define the user type with role information
interface User {
  id: string;
  email?: string;
  role?: string; // admin, coach, or student
  // Add other properties as needed
}

// Define the type for the auth context
interface AuthContextType {
  user: User | null;
  loading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => Promise<void>;
  loadUser: () => Promise<void>;
  getRoleRedirectPath: (role: string) => string;
  signUp: (email: string, password: string, name: string, role: string) => Promise<any>;
}

// Create the auth context
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Constants
const AUTH_OPERATION_TIMEOUT = 15000; // 15 seconds

// Provider component
export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);
  const router = useRouter();

  // Get the role-specific redirect path
  const getRoleRedirectPath = (role: string): string => {
    switch (role) {
      case 'admin':
        return '/dashboard/admin';
      case 'coach':
        return '/dashboard/coach';
      case 'student':
        return '/dashboard/student';
      default:
        return '/dashboard';
    }
  };

  // Load user data from an authenticated session
  const loadUser = async () => {
    try {
      setLoading(true);
      
      // Create a timeout promise for getSession
      const sessionPromise = supabase.auth.getSession();
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Session check timed out')), AUTH_OPERATION_TIMEOUT);
      });
      
      // Race the promises
      const { data, error } = await Promise.race([
        sessionPromise,
        timeoutPromise.then(() => ({ data: null, error: new Error('Session check timed out') }))
      ]) as any;
      
      if (error) {
        console.error('Error checking session:', error);
        setUser(null);
        setLoading(false);
        return;
      }
      
      if (!data?.session) {
        console.log('No active session found');
        setUser(null);
        setLoading(false);
        return;
      }
      
      // Sync token to localStorage
      if (typeof window !== 'undefined') {
        await syncAuthToken();
      }
      
      // Get user info including role from profiles table
      const userId = data.session.user.id;
      const userEmail = data.session.user.email;
      console.log(`User authenticated, fetching profile for ID: ${userId}, Email: ${userEmail}`);
      
      // Try to determine expected role from email
      let expectedRole = 'student';
      if (userEmail?.includes('admin')) {
        expectedRole = 'admin';
      } else if (userEmail?.includes('coach')) {
        expectedRole = 'coach';
      }
      console.log(`Expected role based on email pattern: ${expectedRole}`);
      
      const { data: userData, error: userError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .single();
      
      if (userError) {
        console.error('Error fetching user data:', profileError);
        console.log(`Database error code: ${profileError.code}`);
        console.log(`Database error message: ${profileError.message}`);
        
        // Try to continue with a default role if the profile can't be found
        console.log(`Setting default role "${expectedRole}" due to profile fetch error`);
        setUser({
          ...data.session.user,
          role: expectedRole
        });
      } else if (!userData) {
        console.warn(`No user record found for user ${userId} (${userEmail}), creating one with role "${expectedRole}"`);
        // Attempt to create a profile with role based on email
        try {
          await supabase.from('users').insert({
            id: userId,
            email: data.session.user.email,
            role: expectedRole,
          });
          setUser({
            ...data.session.user,
            role: expectedRole
          });
          console.log(`Created new profile with role ${expectedRole} for user ${userEmail}`);
        } catch (createError) {
          console.error('Failed to create profile:', createError);
          setUser({
            ...data.session.user,
            role: expectedRole
          });
        }
      } else {
        // Log the profile data for debugging
        console.log('User record loaded successfully:', {
          id: profileData.id,
          email: profileData.email,
          role: userData?.role,
          name: profileData.name
        });
        
        // Check if the profile role matches the expected role
        if (userData?.role !== expectedRole) {
          console.warn(`User ${userEmail} has role "${userData?.role}" in the database, but expected "${expectedRole}" based on email pattern`);
        }
        
        // Set user with role from profile
        setUser({
          ...data.session.user,
          role: userData?.role || expectedRole
        });
      }
      
    } catch (error) {
      console.error('Error in loadUser:', error);
      setUser(null);
    } finally {
      setLoading(false);
    }
  };

  // Login function
  const login = async (email: string, password: string) => {
    try {
      setLoading(true);
      
      // Create a timeout promise for signInWithPassword
      const loginPromise = supabase.auth.signInWithPassword({ email, password });
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error('Login process timed out. Please try again.')), AUTH_OPERATION_TIMEOUT);
      });
      
      // Race the promises
      const { data, error } = await Promise.race([
        loginPromise,
        timeoutPromise.then(() => ({ data: null, error: new Error('Login process timed out. Please try again.') }))
      ]) as any;
      
      if (error) {
        throw error;
      }
      
      // Ensure token is synchronized
      if (typeof window !== 'undefined') {
        await syncAuthToken();
      }
      
      // We don't need to call loadUser here as the auth state change listener will do it
    } catch (error) {
      console.error('Login error:', error);
      setLoading(false);
      throw error;
    }
  };

  // Logout function
  const logout = async () => {
    try {
      setLoading(true);
      await supabase.auth.signOut();
      setUser(null);
    } catch (error) {
      console.error('Logout error:', error);
    } finally {
      setLoading(false);
    }
  };

  // SignUp function
  const signUp = async (email: string, password: string, name: string, role: string) => {
    try {
      // Create the user in Supabase Auth
      const { data, error } = await supabase.auth.signUp({
        email,
        password,
      });
      
      if (error) {
        throw error;
      }
      
      if (!data.user) {
        throw new Error('Signup successful but no user returned');
      }
      
      // Now create an entry in the users table with role information
      const { error: profileError } = await supabase
        .from('profiles')
        .insert({
          id: data.user.id,
          email: data.user.email,
          name,
          role
        });
      
      if (userError) {
        console.error('Error creating user:', profileError);
        // Try to clean up the auth user if profile creation fails
        try {
          await supabase.auth.admin.deleteUser(data.user.id);
        } catch (deleteError) {
          console.error('Failed to delete auth user after user creation error:', deleteError);
        }
        throw new Error('Could not create user record');
      }
      
      return {
        id: data.user.id,
        email: data.user.email,
        role,
        name
      };
    } catch (error) {
      console.error('Signup error:', error);
      throw error;
    }
  };

  // Listen for auth state changes
  useEffect(() => {
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        console.log(`Auth state changed: ${event}`);
        
        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {
          await loadUser();
        } else if (event === 'SIGNED_OUT') {
          setUser(null);
        }
      }
    );

    // Load user on initial render
    loadUser();

    // Cleanup subscription on unmount
    return () => {
      subscription.unsubscribe();
    };
  }, []);

  const value = {
    user,
    loading,
    login,
    logout,
    loadUser,
    getRoleRedirectPath,
    signUp
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// Custom hook to use the auth context
export const useAuth = () => {
  // Check if we're in a server-side rendering environment
  if (typeof window === 'undefined') {
    // Return a placeholder during SSR that won't cause rendering issues
    return {
      user: null,
      loading: true,
      login: async () => { console.warn('Login called during SSR') },
      logout: async () => { console.warn('Logout called during SSR') },
      loadUser: async () => { console.warn('LoadUser called during SSR') },
      getRoleRedirectPath: () => '/',
      signUp: async () => { console.warn('SignUp called during SSR') }
    } as AuthContextType;
  }
  
  try {
    const context = useContext(AuthContext);
    
    if (context === undefined) {
      console.warn('useAuth was called outside of AuthProvider - returning mock implementation');
      return {
        user: null,
        loading: false,
        login: async () => { throw new Error('Auth context not available') },
        logout: async () => { throw new Error('Auth context not available') },
        loadUser: async () => { throw new Error('Auth context not available') },
        getRoleRedirectPath: () => '/',
        signUp: async () => { throw new Error('Auth context not available') }
      } as AuthContextType;
    }
    
    return context;
  } catch (error) {
    console.error('Error in useAuth hook:', error);
    return {
      user: null,
      loading: false,
      login: async () => { throw new Error('Auth context error') },
      logout: async () => { throw new Error('Auth context error') },
      loadUser: async () => { throw new Error('Auth context error') },
      getRoleRedirectPath: () => '/',
      signUp: async () => { throw new Error('Auth context error') }
    } as AuthContextType;
  }
}; 